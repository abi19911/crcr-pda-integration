--| Chernobyl Relay Chat
--| Interface for external application
--| By TKGP
--| CRCR additions by Anchorpoint
--| PDA implementation by Sparco

local SCRIPT_VERSION = 6

-- Constants
local UPDATE_INTERVAL = 250
local INPATH = getFS():update_path("$game_config$", "").."\\crc_input.txt"
local OUTPATH = getFS():update_path("$game_config$", "").."\\crc_output.txt"
local QUERY_COLOR = "%c[255,255,192,192]"
local ERROR_COLOR = "%c[255,255,128,128]"
local HIGHLIGHT_COLOR = "%c[255,255,255,128]"
local MONEY_COLOR = "%c[255,255,139,1]"
local INGAME_COLOR = "%c[255,128,255,154]"

-- Options
local option = {
	newsDuration = 10000,
	newsSound = true,
	}

-- Etc
local config = system_ini()
local lastUpdate = 0
local sendQueue = {}
local messageLog = {}
local chatBox
local users = {}
local knownIcons = {}
local prev_money = 0

local function gt(id)
	local result = game.translate_string(id)
	if result == id then
		return nil
	else
		return result
	end
end

local function soundPicker(messageType)
	local result
	if messageType == gt("crc_info") then result = "pda_welcome" return result
	elseif messageType == gt("crc_error") then result = "pda_alarm" return result
	else result = "pda_tips" return result end
end

local function addMessage(icon, title, text)
	local messageLoglength = size_table(messageLog)
	if messageLoglength > 14 then
		local toRemove = messageLoglength - 14
		for i = toRemove, 1, -1 do
			table.remove(messageLog, 1)
		end
	end
	table.insert(messageLog, {title = title, text = text, icon = icon})
	db.actor:give_game_news(title, text, icon, 0, option.newsDuration)
	if option.newsSound then
		xr_sound.set_sound_play(db.actor:id(), soundPicker(title))
	end
end

local function send(message, ...)
	local line = message:format(...).."\n"
	table.insert(sendQueue, line)
end

local inputActions = {
	Information = function (body)
		icon = crc_icons.info
		title = gt("crc_info")
		text = body
		addMessage(icon, title, text)
	end,
	Error = function (body)
		icon = crc_icons.error
		title = gt("crc_error")
		text = ERROR_COLOR..body
		addMessage(icon, title, text)
	end,
	Message = function (body)
		local faction, name, highlight, message = body:match("([^/]+)/([^/]+)/([^/]+)/(.+)")
		highlight = highlight == "True"
		icon = crc_icons.getIcon(name, faction)
		knownIcons[name] = icon
		if chatBox then
			chatBox:UpdateUsers()
		end
		title = name..", "..(name == "Anchorpoint" and gt("crc_admin")
			or gt("crc_"..faction) or gt("crc_actor_anonymous") or gt("crc_unknown"))
		if highlight then
			text = HIGHLIGHT_COLOR..message
		else
			text = message
		end
		addMessage(icon, title, text)
	end,
	Query = function (body)
		local faction, from, to, message = body:match("([^/]+)/([^/]+)/([^/]+)/(.+)")
		icon = crc_icons.getIcon(from, faction)
		knownIcons[from] = icon
		if chatBox then
			chatBox:UpdateUsers()
		end
		title = from.." -> "..to
		text = QUERY_COLOR..message
		addMessage(icon, title, text)
	end,
	Money = function(body)
		local from, to, message = body:match("([^/]+)/([^/]+)/(.+)")
		icon = crc_icons.info
		if chatBox then
			chatBox:UpdateUsers()
		end
		title = from.." "..(gt("crc_money")).." "..to
		text = MONEY_COLOR..message.." RUB"
		addMessage(icon, title, text)
		if users[from] then
			db.actor:give_money(-message)
		end
	end,
	MoneyRecv = function(body)
		local from, message = body:match("([^/]+)/(.+)")
		icon = crc_icons.info
		if chatBox then
			chatBox:UpdateUsers()
		end
		title = from.." "..(gt("crc_money_recv"))
		text = MONEY_COLOR..message.." RUB"
		addMessage(icon, title, text)
		db.actor:give_money(message)
	end,
	Setting = function (body)
		local setting, value = body:match("([^/]+)/(.+)")
		if setting == "NewsDuration" then
			option.newsDuration = tonumber(value)
		elseif setting == "NewsSound" then
			option.newsSound = value == "True"
		elseif setting == "ActorStatus" then
			send("Money/%s", db.actor:money())
			send("ConnLost/%s", fake_conn_lost())
			send("DEBUG/%s", DEV_DEBUG)
		elseif setting == "Channel" then
			prevChannel = tonumber(value)
		end
	end,
	Users = function (body)
		users = {}
		for k, v in body:gmatch("([^/]+)%s=%s([^/]+)") do
			users[k] = v
		end
		if chatBox then
			chatBox:UpdateUsers()
		end
	end,
}

local function update()
	if not db.actor or time_global() < lastUpdate + UPDATE_INTERVAL then return end
	lastUpdate = time_global()

	if #sendQueue > 0 then
		local output = io.open(OUTPATH, "a")
		if output then
			for _, line in ipairs(sendQueue) do
				output:write(line)
			end
			output:close()
			sendQueue = {}
		end
	end

	local input = io.open(INPATH, "r")
	if input then
		local receiveQueue = {}
		for line in input:lines() do
			table.insert(receiveQueue, line)
		end
		input:close()
		input = io.open(INPATH, "w")
		if input then
			input:close()
			for _, line in ipairs(receiveQueue) do
				local type, body = line:match("([^/]+)/(.+)")
				local action = inputActions[type]
				if action then
					action(body)
				else
					-- Whine about it
				end
			end
		end
	end
end

local function onDeath(whoID)
	local section, class
	local who = whoID and alife():object(whoID)
	if not who then
		section = "UNKNOWN"
		class = "UNKNOWN"
	else
		section = who:section_name()
		class = ini_sys:r_string_ex(section, "kind") or ini_sys:r_string_ex(section, "class")
		if class == "AI_STL_S" then
			class = who:community()
		end
	end
	if not isDead then --possible fix for death message spam
		send("Death/%s/%s/%s/%s", db.actor:character_community(), level.name(), class:upper(), section)
		isDead = true
	end
	ChatBoxEnabled = false
end

function update_money()
    local cur_money = db.actor:money()
    if prev_money == cur_money then return end
    -- munie changed here
    prev_money = cur_money
	send("Money/%s", cur_money)
end

function fake_conn_lost_update_client()
	cur_fake_conn_status = fake_conn_lost()
	if prev_fake_conn_status == cur_fake_conn_status then return end
	prev_fake_conn_status = cur_fake_conn_status
	send("ConnLost/%s", cur_fake_conn_status)
	printf("Connection status updated to client - "..tostring(cur_fake_conn_status))
end

function fake_conn_lost()
	if (level_weathers.bLevelUnderground or xr_conditions.surge_started()) then
		return true
	end
	return false
end

function actor_on_update()
    update_money()
	fake_conn_lost_update_client()
end

function save_state(m_data)
	m_data.connstatus = prev_fake_conn_status
	m_data.prevChannel = prevChannel
end

function load_state(m_data)
	prev_fake_conn_status = m_data.connstatus or false
	prevChannel = m_data.prevChannel or 1
end

function on_game_start()
	isDead = false
	AddUniqueCall(update)
	RegisterScriptCallback("save_state", save_state)
	RegisterScriptCallback("load_state", load_state)
	RegisterScriptCallback("actor_on_before_death", onDeath)
	RegisterScriptCallback("actor_on_update", actor_on_update)
	-- RegisterScriptCallback("actor_on_net_destroy", actor_on_net_destroy)
	-- Not using axr_keybind for old version compatibility
	send("Handshake/%s", SCRIPT_VERSION)
end

----------------------------------------------GUI------------------------------------------------------
-- PDA --
local SINGLETON = nil
function get_ui()
	SINGLETON = SINGLETON or ChatBox()
	SINGLETON:Reset()
	return SINGLETON
end

class "ChatBox" (CUIScriptWnd)

function ChatBox:__init() super()
	currChannel = self.currChannel
 	self:SetWndRect(Frect():set(0, 0, 1024, 768))
 	self.xml = CScriptXmlInit()
 	self.xml:ParseFile("pda_crcr.xml")

 	--self.xml:InitStatic("background", self)
 	self.xml:InitStatic("background_userlist", self)
 	self.xml:InitFrame("frame", self)

 	--self.editBox = self.xml:InitEditBox("edit_box", self)
 	self.list_channel = self.xml:InitComboBox("list_channel", self)
 	self.scroll = self.xml:InitScrollView("scroll", self)

 	self:Register(self.list_channel, "list_channel")

	self:AddCallback("list_channel", ui_events.LIST_ITEM_SELECT, self.OnSelectChannel, self)

	self.users = {}
	self.messages = {}

 	self.table_channel = {
 		"#crcr_english",
 		"#crcr_english_rp",
 		"#crcr_english_shitposting",
 		"#crcr_russian",
 		"#crcr_russian_rp",
 		"#crcr_tech_support",
 	}

 	for i=1,#self.table_channel do
 		self.list_channel:AddItem(gt(self.table_channel[i]), i)
 	end

 	local index = prevChannel or 1
 	self.list_channel:SetText(gt(self.table_channel[index]))

 	--self.focus = false
end

function ChatBox:Update()
	CUIScriptWnd.Update(self)
	-- Auto-update if checked.
	local tg = time_global()
	if not self._tmr or self._tmr < tg then
		self._tmr = tg + 1000
		self:Reset()
	end
end

function ChatBox:Reset()
	self:UpdateUsers()
	self:UpdateMessages()
end

function ChatBox:OnSelectChannel()
	if prevChannel == self.list_channel:CurrentID() then return end
	prevChannel = self.list_channel:CurrentID()
	send("Channel/%s", prevChannel)
end

function ChatBox:UpdateUsers()
	self.scroll:Clear()

	local index = 1

	for k, v in pairs(users) do
		IsInGame = v == "True"
		local user = self.xml:InitStatic("user", nil)
		self.xml:InitStatic("user:icon", user):InitTexture(knownIcons[k] or crc_icons.unknown)
		self.xml:InitStatic("user:name", user):TextControl():SetText(k)
		self.user_status = self.xml:InitStatic("user:status", user)
		if IsInGame then
			self.user_status:TextControl():SetText(gt("crc_ingame"))
			self.user_status:TextControl():SetTextColor(GetARGB(255, 128, 255, 154))
		else
			self.user_status:TextControl():SetText(gt("crc_notingame"))
			self.user_status:TextControl():SetTextColor(GetARGB(255, 255, 128, 128))
		end
		self.scroll:AddWindow(user, true)
		user:SetAutoDelete(true)
	end
end

function ChatBox:UpdateMessages()
	for _, message in ipairs(self.messages) do
		self:DetachChild(message)
	end
	self.messages = {}
	for index, messageData in ipairs(messageLog) do
		local message = self.xml:InitStatic("message", self)
		local newPos = vector2():set(15, 758 - 100 - (#messageLog - index) * message:GetHeight())
		message:SetWndPos(newPos)
		self.xml:InitStatic("message:icon", message):InitTexture(messageData.icon)
		self.xml:InitStatic("message:title", message):TextControl():SetText(messageData.title)
		self.xml:InitStatic("message:message_text", message):TextControl():SetText(messageData.text)
		table.insert(self.messages, message)
	end
end